Assert that {actual == expected} with actual=12 expected=34 ... failed [run.py:XX]
Assert that {actual == expected} with actual{='prefix'+' foo bar '+'suffix'} ="prefix foo bar suffix" extraParamNotUsed="baz" expected="foobar" ... failed [run.py:XX]
Assert that {actual == expected} with actual="prefix f\oo bar suffix" expected="f\oobar" ... bad performance [run.py:XX]
Assert that {actual == expected} with actual=MyClass2(Hello) expected=MyClass2(Hello there) ... failed [run.py:XX]
Assert that {actual is expected} with actual=MyClass2(Hello) expected=MyClass2(Hello) ... failed [run.py:XX]
Assert that {actual == expected} with actual{=myDataStructure['item3'][-1].getId()} ="baZaar" expected="baz" ... failed [run.py:XX]
Assert that {value == expected} with value=['c DIFF1 LONG_COMMON_STRING DIFF2 c'] expected=['c xDIFF1x LONG_COMMON_STRING xDIFF2x c'] ... failed [run.py:XX]
Assert that {value == expected} with value=['c DIFF1 SCS DIFF2 c'] expected=['c xDIFF1x SCS xDIFF2x c'] ... failed [run.py:XX]
Assert that {value == expected} with value=['c DIFFERENCE c'] expected=['c YIKES c'] ... failed [run.py:XX]
Assert that {value == expected} with value="DIFFERENCE c" expected="YIKES c" ... failed [run.py:XX]
Assert that {value == expected} with value="c DIFFERENCE" expected="c YIKES" ... failed [run.py:XX]
Assert that {value == expected} with value=['c', 'DIFF1', 'LONG_COMMON_STRING DIFF2', 1.5, True, 'c2', 'c3', 'c4', 'c5', <MyClass2 object at 0xZZZZ>] expected=['c', 'xDIFF1x', 'LONG_COMMON_STRING', 'xDIFF2x', 2, False, 'c2', 'c3', 'c4', 'c5'] ... failed [run.py:XX]
Assert that {value == expected} with value={'aaaaaaaaaaaaaaaaaaaaaaaaaaaa': 123, 'g': True, 'c': [1, 2, 'Hi "there"']} expected={'g': True, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaa': 123, 'c': [1, 2, '\t"there"']} ... failed [run.py:XX]
Assert that {reasonFailedEvalAssert.startswith(expected)} with reasonFailedEvalAssert='Assert that {actual == expected} with actual{=\'prefix\'+\' foo bar \'+\'suffix\'} ="prefix foo bar suffix" extraParamNotUsed="baz" expected="foobar"' expected="Assert that {actual == expected} with " ... passed
Assert that {actualStartupMessage == expected} with expected="Started successfully" actualStartupMessage="Started successfully" ... passed
Assert that {actualStartupMessage.endswith('successfully')} with actualStartupMessage="Started successfully" ... passed
Assert that {(0 <= actualValue < max) and type(actualValue)!=float} with actualValue=20 max=100 ... passed
Assert that {IS_WINDOWS or re.match(expected, actual)} with actual="foo" expected="f.*" ... passed
Assert that {import_module('tarfile').is_tarfile(self.output+file) is False} with file="/foo.zip" ... passed
Assert that {float(startupTime) < 60.0} with startupTime{=self.getExprFromFile('myprocess-1.log', 'Server started in ([0-9.]+) seconds')} ="51.9" ... passed
Assert that {float(startupTime) < 60.0} with startupTime{=self.getExprFromFile('myprocess-2.log', 'Server started in ([0-9.]+) seconds')} ="20.3" ... passed
Assert that {serverStartInfo == expected} with expected={'startupTime': '20.3', 'user': None} serverStartInfo{=self.getExprFromFile('myprocess-2.log', 'Server started in (?P<startupTime>[0-9.]+) seconds(?P<user> as user .*)?')} ={'startupTime': '20.3', 'user': None} ... passed
Assert that {serverStartInfo == expected} with expected=[{'startupTime': '20.3', 'user': None}] serverStartInfo{=self.getExprFromFile('myprocess-2.log', 'Server started in (?P<startupTime>[0-9.]+) seconds(?P<user> as user .*)?', returnAll=True)} =[{'startupTime': '20.3', 'user': None}] ... passed
Assert that {actualUser == expected} with expected="myuser" actualUser="myuser" ... passed
Assert that {actual == expected} with actual{=myDataStructure['item1'][-1].getId()} ="foo" expected="foo" ... passed
Assert that {actual == expected} with actual{=myDataStructure['item2'][-1].getId()} ="bar" expected="bar" ... passed
Assert that {actual == expected} with actual{=myDataStructure['item3'][-1].getId()} ="baZaar" expected="baz" ... passed
Assert that {actual == expected} with actual{=myDataStructure['item2'][-1].id} ="bar" expected="bar" ... passed
Assert that {len(actual) == 1} with actual{=myDataStructure['item2']} =[MyClass(bar)] ... passed
Assert that {actual == expected} with item{=myDataStructure['item1']} =[MyClass(foo)] actual{=item[-1].getId()} ="foo" expected="foo" needsPython36=True ... passed
Assert that {float(value) < expected} with value{=grep('myprocess-2.log', 'Server started in ([0-9.]+) seconds')} ="20.3" expected=60.0 ... passed
Assert that {re.match(expectedRegex, value)} with value{=grep('myserver.log', 'Successfully authenticated user .*in ([^ ]+) seconds')} ="20.3" expectedRegex="[0-9.]+$" ... passed
Assert that {re.match(expectedRegex, value, flags=2)} with value{=grep('myserver.log', 'Successfully authenticated user "(.*)"')} ="Ben" expectedRegex="be." ... passed
Assert that {actualErrorMessage == "Foo\"\'\nbar"} with actualErrorMessage='Foo"\'\nbar' ... passed
Assert that {actualFileSize > 0} with actualFileSize{=os.path.getsize(self.output+'/file1.dat')} =3 ... passed
Assert that {actualFileSize > 0} with actualFileSize{=os.path.getsize(self.output+'/file2.dat')} =3 ... passed
Assert that {5 == 5.0} ... passed
